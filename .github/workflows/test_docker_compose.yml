name: Test Docker Compose
on:
  pull_request:
    paths:
      - 'docker-compose.yml'
      - 'backend/**'
      - 'frontend/**'
      - '.github/workflows/test_docker_compose.yml'

# Cancel in-progress runs if new commit pushed
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test-docker-compose:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Needed for git versioning

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and start services
        env:
          SEED_DATA: "true"  # Enable seeding to test full application setup
          DISABLE_PERIODIC_TASKS: "true"  # Disable external API calls in CI
        run: |
          docker compose build
          docker compose up -d

      - name: Wait for services to be healthy
        run: |
          echo "Waiting for all services to be healthy..."
        
          # Maximum wait time (in seconds)
          MAX_WAIT=300
          ELAPSED=0
          INTERVAL=5

          while [ $ELAPSED -lt $MAX_WAIT ]; do
            # Check health status of all services
            HEALTH_STATUS=$(docker compose ps --format json | jq -r '.[] | select(has("Health")) | .Health // "unknown"')

            # Check if all services are healthy
            ALL_HEALTHY=true
            for status in $HEALTH_STATUS; do
              if [ "$status" != "healthy" ] && [ "$status" != "unknown" ] && [ "$status" != "" ]; then
                ALL_HEALTHY=false
                break
              fi
            done

            if [ "$ALL_HEALTHY" = true ]; then
              echo "All services are healthy!"
              docker compose ps
              break
            fi

            echo "Waiting for services... ($ELAPSED/$MAX_WAIT seconds)"
            sleep $INTERVAL
            ELAPSED=$((ELAPSED + INTERVAL))
          done

          if [ $ELAPSED -ge $MAX_WAIT ]; then
            echo "Timeout waiting for services to be healthy"
            docker compose ps
            docker compose logs
            exit 1
          fi

      - name: Test API endpoint
        run: |
          echo "Testing API version endpoint..."
          curl -f http://localhost:30000/v1/version || (echo "API test failed" && exit 1)

      - name: Test Frontend
        run: |
          echo "Testing frontend HTTP response..."
          curl -f -I http://localhost:30001 || (echo "Frontend test failed" && exit 1)

      - name: Test Database connectivity
        run: |
          echo "Testing database connectivity through API..."
          # The API health check already verifies DB connectivity
          # but we can also check if migrations ran successfully
          docker compose exec -T test-observer-api uv run alembic current || (echo "Database migration check failed" && exit 1)

      - name: Show service logs on failure
        if: failure()
        run: |
          echo "=== Docker Compose Status ==="
          docker compose ps
          echo -e "\n=== Docker Compose Logs ==="
          docker compose logs

      - name: Clean up
        if: always()
        run: |
          docker compose down -v
